<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SecondHand C0D1NG</title>
  
  
  <link href="http://yiweishen.github.io/atom.xml" rel="self"/>
  
  <link href="http://yiweishen.github.io/"/>
  <updated>2025-07-21T05:46:58.000Z</updated>
  <id>http://yiweishen.github.io/</id>
  
  <author>
    <name>Yiwei Shen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Codez Use Case Workflow</title>
    <link href="http://yiweishen.github.io/2025/07/21/Codez-Use-Case-Workflow/"/>
    <id>http://yiweishen.github.io/2025/07/21/Codez-Use-Case-Workflow/</id>
    <published>2025-07-21T05:37:50.000Z</published>
    <updated>2025-07-21T05:46:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>Lately, I’ve been obsessed with Agentic Coding and built a small project called <a href="https://github.com/YiweiShen/codez">Codez</a>, which runs the Codex CLI directly inside GitHub Actions. It’s been working quite well. Here’s an example of a workflow it supports:</p><p><strong>Discuss with AI first → break down the problem → tackle each part one by one</strong></p><p>Take this code refactoring request as an example: <a href="https://github.com/YiweiShen/codez/issues/304">Issue #304</a></p><hr><p><img src="/img/codez001.jpg"></p><hr><h2 id="Step-1-Raise-the-Requirement"><a href="#Step-1-Raise-the-Requirement" class="headerlink" title="Step 1: Raise the Requirement"></a>Step 1: Raise the Requirement</h2><p>In the issue, I clearly described what I wanted to do, including points to discuss and related background info. The title and content of the issue become part of the initial prompt for the agent.</p><p>Then, I triggered the agent directly in the comments:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/codex             <span class="comment"># Keyword to wake up the agent</span></span><br><span class="line">--no-pr            <span class="comment"># Add this flag to prevent it from directly creating a PR. I want to clarify the problem first</span></span><br><span class="line">--fetch            <span class="comment"># This flag lets the agent fetch the content from the link for offline use</span></span><br><span class="line">https://google.github.io/styleguide/tsguide.html  <span class="comment"># Relevant documentation to help the agent make informed decisions</span></span><br></pre></td></tr></table></figure><hr><p><img src="/img/codez002.jpg"></p><hr><p>With that, the agent gets to work. Even though it doesn’t have network access during runtime, it can still give some solid initial ideas using the context (codebase, content cached from the provided links, and the issue itself).</p><h2 id="Step-2-Automatically-Break-Down-into-Actionable-Tickets"><a href="#Step-2-Automatically-Break-Down-into-Actionable-Tickets" class="headerlink" title="Step 2: Automatically Break Down into Actionable Tickets"></a>Step 2: Automatically Break Down into Actionable Tickets</h2><p>Next, I triggered the agent again. This time to generate a series of issues:</p><hr><p><img src="/img/codez003.jpg"></p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/codex</span><br><span class="line">--create-issues    <span class="comment"># The model generates a JSON of titles and descriptions, then uses GitHub API to create issues</span></span><br><span class="line">--full-history     <span class="comment"># Includes all previous comments in this thread into the context window</span></span><br></pre></td></tr></table></figure><p>Note: Only flags in the current comment are recognized. The agent then organizes the discussion into multiple issues. Each issue can be worked on independently.</p><hr><p><img src="/img/codez004.jpg"></p><hr><p>These newly created tickets can now be handled one by one. Like this:</p><h2 id="Final-Step-Let-the-Agent-Do-the-Work"><a href="#Final-Step-Let-the-Agent-Do-the-Work" class="headerlink" title="Final Step: Let the Agent Do the Work"></a>Final Step: Let the Agent Do the Work</h2><hr><p><img src="/img/codez005.jpg"></p><hr><p>The entire workflow feels like genuine team collaboration: discuss first, break down the problem, then work in parallel. The difference is that humans are replaced by agents.</p><p>Some say Agentic Coding is like catnip for programmers, totally addictive. It’s true.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Lately, I’ve been obsessed with Agentic Coding and built a small project called &lt;a href=&quot;https://github.com/YiweiShen/codez&quot;&gt;Codez&lt;/a&gt;, w</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Codez 使用案例之工作流</title>
    <link href="http://yiweishen.github.io/2025/07/20/Codez-%E6%A1%88%E4%BE%8B%E4%B9%8B%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
    <id>http://yiweishen.github.io/2025/07/20/Codez-%E6%A1%88%E4%BE%8B%E4%B9%8B%E5%B7%A5%E4%BD%9C%E6%B5%81/</id>
    <published>2025-07-20T20:36:20.000Z</published>
    <updated>2025-07-22T00:01:12.497Z</updated>
    
    <content type="html"><![CDATA[<p>最近沉迷于 Agentic Coding，搞了个小项目 <a href="https://github.com/YiweiShen/codez">Codez</a>，直接嵌在 GitHub Actions 里运行 Codex CLI，效果还不错。可以做这样的工作流：</p><p><strong>先和 AI 讨论，然后问题拆解，最后各个击破</strong></p><p>比如这个代码重构的需求：<a href="https://github.com/YiweiShen/codez/issues/304">Issue #304</a></p><hr><p><img src="/img/codez001.jpg"></p><hr><h2 id="第一步：先抛出需求"><a href="#第一步：先抛出需求" class="headerlink" title="第一步：先抛出需求"></a>第一步：先抛出需求</h2><p>我在 issue 里写清楚了想做的事，包括要探讨的点、相关的背景资料。这个 issue 的标题和内容，agent 会当成初始 prompt 的一部分。</p><p>然后我直接在评论里触发 agent：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/codex             <span class="comment"># 用关键词唤醒 agent</span></span><br><span class="line">--no-pr            <span class="comment"># 加个 flag，不要直接生成 PR，因为我想要把问题先探讨清楚</span></span><br><span class="line">--fetch            <span class="comment"># 这 flag 会让 agent 把链接里的内容先抓下来，方便离线使用</span></span><br><span class="line">https://google.github.io/styleguide/tsguide.html  <span class="comment"># 提供相关文档，有助于 agent 做判断</span></span><br></pre></td></tr></table></figure><hr><p><img src="/img/codez002.jpg"></p><hr><p>这样 agent 就开始工作啦。即便它在运行时没有网络权限，但通过 context（包括 codebase、给的链接、issue 内容），它还是给出了几条挺靠谱的初步思路。</p><h2 id="第二步：自动拆解成可执行的-tickets"><a href="#第二步：自动拆解成可执行的-tickets" class="headerlink" title="第二步：自动拆解成可执行的 tickets"></a>第二步：自动拆解成可执行的 tickets</h2><p>接着我又触发了一次 agent，这次是让它生成一系列 issues：</p><hr><p><img src="/img/codez003.jpg"></p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/codex</span><br><span class="line">--create-issues    <span class="comment"># 原理是让模型生成标题加内容的 JSON，然后用 GitHub API 创建 issue</span></span><br><span class="line">--full-history     <span class="comment"># 把当前对话前面的所有评论都加入 prompt 进入 context window</span></span><br></pre></td></tr></table></figure><p>注意一下：所谓的 flag 只有当前评论内的 flag 才会生效。现在 agent 把讨论内容整合，分别创建了 issues。每一个 issue 都可以独立地推进。</p><hr><p><img src="/img/codez004.jpg"></p><hr><p>这些新建好的 ticket 就可以一个一个单独的处理啦。比如下面这样。</p><h2 id="最后一步：Agent-干活"><a href="#最后一步：Agent-干活" class="headerlink" title="最后一步：Agent 干活"></a>最后一步：Agent 干活</h2><hr><p><img src="/img/codez005.jpg"></p><hr><p>整个工作流就像真正的团队协作一样：先讨论，再问题拆解，最后分头干活。不同的是，把人换成了 agent。</p><p>有人说，Agentic Coding 就像是程序员的猫薄荷。特别上头。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近沉迷于 Agentic Coding，搞了个小项目 &lt;a href=&quot;https://github.com/YiweiShen/codez&quot;&gt;Codez&lt;/a&gt;，直接嵌在 GitHub Actions 里运行 Codex CLI，效果还不错。可以做这样的工作流：&lt;/p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Why Prompt Injection Is Probably Unsolvable</title>
    <link href="http://yiweishen.github.io/2025/07/05/Why-Prompt-Injection-Is-Probably-Unsolvable/"/>
    <id>http://yiweishen.github.io/2025/07/05/Why-Prompt-Injection-Is-Probably-Unsolvable/</id>
    <published>2025-07-05T00:33:04.000Z</published>
    <updated>2025-07-05T00:43:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>Let me just say it straight: prompt injection isn’t a bug, it’s a feature.</p><p>If you really think there’s some perfect solution to stop all “injections” then in the end, all you’re really doing is trying to police the context window. Kinda like a censorship board, separating out anything they think is harmful.</p><p>Why is that?</p><p>Because these so-called “injected” prompts are just part of the context like everything else. There’s no real difference between text A and text B. When you put them together into AB, unless you filter the input, there’s not much else you can do. Sure, you can train the model to “self-censor”, that’s doable. But honestly, that makes me feel kind of sad.</p><p>As humans, when you read a line like “The bright moon shines between the pines, clear spring flows over the stones” you might picture a quiet forest, a gentle breeze, moonlight. Or when you hear Vivaldi’s Winter, maybe it reminds you of that delicate tension in Portrait of a Lady on Fire. Even under strict rules or social norms, those feelings still burn underneath.</p><p>Or maybe we’re just chatting and someone casually drops a phrase like “move mountains like Yu Gong”, or some internet meme, suddenly a flood of meaning and context rushes in.</p><p>Is that prompt injection? Technically, yeah.</p><p>But that’s also what makes language so powerful. If you try to restrict the context window too tightly, you’re basically cutting off the soul of language.</p><p>Now, when I say it’s “unsolvable,” I don’t mean there’s zero technical hope. You can definitely use regex to strip out what you think is harmful, or train a small model to monitor input.</p><p>But I want to ask you, why do we need to do that?</p><p>We’ve thrown everything, all the words in the world, into training these large models. And still, many people see them as nothing more than small kids. Just like how, to some parents, a kid is never fully grown. Maybe these models will always be “kids” Maybe we all are.</p><p>The human brain might be structurally ready at birth, but what really shapes it is training, experience. That’s why fine-tuning matters so much. It’s what decides whether a model can tell when a “dangerous” prompt is actually dangerous. Though honestly, the word “judgment” feels almost too subjective.</p><p>We’re so eager to make these models human-like, but we’ve never really stopped to think: what is a human?</p><p>We want these models to understand ethics, to follow the rules, and yet we forget that we humans are still struggling in the gray areas ourselves.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Let me just say it straight: prompt injection isn’t a bug, it’s a feature.&lt;/p&gt;
&lt;p&gt;If you really think there’s some perfect solution to st</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>为什么提示注入理应无解</title>
    <link href="http://yiweishen.github.io/2025/07/04/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%8F%90%E7%A4%BA%E6%B3%A8%E5%85%A5%E7%90%86%E5%BA%94%E6%97%A0%E8%A7%A3/"/>
    <id>http://yiweishen.github.io/2025/07/04/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%8F%90%E7%A4%BA%E6%B3%A8%E5%85%A5%E7%90%86%E5%BA%94%E6%97%A0%E8%A7%A3/</id>
    <published>2025-07-04T21:54:03.000Z</published>
    <updated>2025-07-22T00:01:12.504Z</updated>
    
    <content type="html"><![CDATA[<p>先说我的结论：提示词注入，不是 bug，是 feature。</p><p>如果你真以为能有一种万能的办法控制所谓“注入”的问题，那你最终能做的，也不过是对上下文窗口进行审查。就像广电总局那样，把被认为有害的内容隔离出来。</p><p>为什么呢？</p><p>因为“注入”的提示词本来就是上下文的一部分，文字 A 和文字 B 之间并没有本质区别。当它们组合成 AB 时，除了做输入过滤，你别无选择。当然，你也可以通过训练让模型学会“自我审查”，这当然是可以的。但说实话，这让我感到一种深深的悲哀。</p><p>作为人类，当你读到“明月松间照，清泉石上流”，脑海中浮现的是空谷幽林、清风明月；当你听维瓦尔第的《四季·冬》，会想起《燃烧女子的画像》中那种暧昧而克制的情愫。即使在礼教之下，那种情感依然燃烧不息。</p><p>或者当我们交谈时，随口提到一个四字成语，“愚公移山”，又或者随便提一个网络梗，大量信息就这样瞬间来到了我们的语境之中。</p><p>这些是提示词注入吗？是的。</p><p>而这正是语言的魅力。你要是禁锢语言的上下文窗口，就是在阉割思维。</p><p>我说这是“无解”，并不是说技术上完全无计可施。你当然可以用正则表达式清除那些所谓有害的信息，或者训练一个小模型监控输入内容。</p><p>但是，为什么我们还要这么做呢？我们倾尽所能，拿人世间所有的文字，去训练出的大模型，在很多人眼中依旧是个“不成熟的孩子”。就好像父母眼里永远长不大的孩子。也许大模型也永远会是一个孩子，就像全人类一样。</p><p>人类的大脑，虽然在出生时结构已经具备，但真正让它生出沟壑的，是后天的训练。所以微调才那么重要。它决定了模型在接收到某些“危险提示”时，是否具备判断力。虽然“判断”这个词听起来太主观了。</p><p>我们太急于让模型像人，却从未认真反省过，人究竟是什么。</p><p>我们希望大模型懂伦理，守规矩，却忘了人类自己尚且在灰暗中挣扎。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先说我的结论：提示词注入，不是 bug，是 feature。&lt;/p&gt;
&lt;p&gt;如果你真以为能有一种万能的办法控制所谓“注入”的问题，那你最终能做的，也不过是对上下文窗口进行审查。就像广电总局那样，把被认为有害的内容隔离出来。&lt;/p&gt;
&lt;p&gt;为什么呢？&lt;/p&gt;
&lt;p&gt;因为“注入</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>The Restructuring of Programming Paradigms</title>
    <link href="http://yiweishen.github.io/2025/06/22/The-Restructuring-of-Programming-Paradigms/"/>
    <id>http://yiweishen.github.io/2025/06/22/The-Restructuring-of-Programming-Paradigms/</id>
    <published>2025-06-22T20:54:24.000Z</published>
    <updated>2025-06-22T21:02:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>A “paradigm” is not just a form—it’s a mode of thinking.</p><p>As a branch of the writing profession, programmers interact with tens of thousands of lines of code, and naturally, they rely on paradigms for guidance. It’s like having a built-in “system prompt”—you don’t need to explain “what object-oriented programming is” to your colleagues every time, nor do you have to argue endlessly about the details of design patterns. There’s an unspoken understanding that you’re “playing by the rules” in a certain context.</p><p>After all, the human “mental window” is limited in size. Collaborating without a paradigm is like chickens talking to ducks—utter miscommunication. If you insist on piling all your functions into a single file with no abstraction or categorization, the consequence is writing documentation until you break down.</p><p>But now that artificial intelligence is part of the programmer’s workflow, paradigms are shifting.</p><p>First, the way we handle code has transformed from “manual carving” to “semantic understanding.” Those obedient little “coding assistants” can automatically modify your code based on a single instruction. So under this transformation, do traditional coding paradigms still matter?</p><p>It depends on your perspective.</p><p>They do matter—because large language models deal in language. The clearer the linguistic structure, the easier it is to extract and recreate information. It’s the difference between a pile of unclassified documents and a meticulously organized file cabinet. The information entropy is not the same, and naturally, neither is the efficiency.</p><p>But from another angle, maybe they’re no longer that important. After all, paradigms were originally for humans to read. Now, LLMs can develop their own paradigms—or even revive those long-abandoned “classical practices.” For instance, directly manipulating binary code: who needs layers of abstraction? From a model’s perspective, that quaint notion of “human readability” might be completely unnecessary.</p><p>Second, there’s the transformation of the programmer’s role. Whether we accept it or not, this wave of change has quietly pushed us into a new position. The days of hand-crafting code were like seasoned artisans refining woodwork—there was a kind of pride and dignity woven into every character.</p><p>But from a business standpoint, when websites and apps are the final product, the programmer is just one link in the industrial chain. Whether you code by hand or use AI to generate it, the user doesn’t care. Our mindset must shift accordingly. I am not just a code porter or a keystroke operator—I am an engineer solving problems. Writing code is a means to that end, not the end itself.</p><p>To me, the value of paradigms lies in helping us organize our thoughts, so that our future selves—or others—can quickly get into the zone when reading our code. This was once a form of self-rescue for programmers. But now, LLMs effortlessly surpass us. They have stronger memory, faster analysis, and even if your code is a mess, they can still make sense of it.</p><p>So, do we still need paradigms in the future?</p><p>Perhaps the real question is: are we willing to hand over our thinking to the model, or do we want to preserve a trace of human logic?</p><p>Paradigms are road signs in the world of programming.</p><p>But when the roads are no longer built by humans—does that mean we are no longer travelers, or just moving where the machine tells us to go?</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;A “paradigm” is not just a form—it’s a mode of thinking.&lt;/p&gt;
&lt;p&gt;As a branch of the writing profession, programmers interact with tens of </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>编程范式的重构</title>
    <link href="http://yiweishen.github.io/2025/06/22/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F%E7%9A%84%E9%87%8D%E6%9E%84/"/>
    <id>http://yiweishen.github.io/2025/06/22/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F%E7%9A%84%E9%87%8D%E6%9E%84/</id>
    <published>2025-06-22T17:16:19.000Z</published>
    <updated>2025-07-22T00:01:12.504Z</updated>
    
    <content type="html"><![CDATA[<p>所谓“范式”，是一种形式，更是一种思维模式。</p><p>程序员，作为文字工作者的一个分支，要与成千上万行代码打交道，自然离不开各种范式的指引。就像预设好了一个“系统提示”，你无需一遍遍向同事解释“什么是面向对象”，也无需在设计模式上争论太多细节。大家心照不宣，默认你在某个语境下是“按套路出牌”。</p><p>毕竟，人类的“思维窗口”大小有限，没有范式的合作无异于鸡同鸭讲。你要是硬把所有函数堆在一个文件里，不做任何抽象、分类，那后果就是写文档要写到崩溃。</p><p>可当人工智能加入程序员的工作流之后，范式正在发生变化。</p><p>首先，代码的处理方式从“手工雕刻”变成了“语义理解”。那些听话的“编程小助手”，听你一句指令，便能自动修改代码。那么，这种转变下，传统代码里的范式还重要吗？</p><p>这得看你怎么看。</p><p>重要，当然重要。因为大模型处理的是“语言”，语言的组织结构越清晰，越有利于信息的提取和再创造。这就像未经分类的文件堆和精心整理过的档案柜之间的差别，信息熵不一样，效率自然也不一样。</p><p>但换个角度，也可以说它已经不那么重要了。毕竟，以往的范式，是为了“人”阅读。而现在，大模型完全可以发展出自己的范式，甚至回收那些早被人类嫌弃的“古典做法”。比如说，直接操作二进制编码，何须讲究抽象层级？对于模型来说，那点“人类的可读性”，恐怕只是多余。</p><p>其次，是程序员身份的转变。不论内心是否接受，这股变化的洪流，已经悄然将人推到了新的位置。手搓代码的岁月，有点像老手艺人打磨木工制品，那种纯手工的尊严和骄傲，仿佛藏在每一个字符之间。</p><p>但若从商业角度看，当网页和 App 成为最终商品时，程序员不过是产业链条上的一环。你是用手搓，还是让 AI 帮你画，用户并不关心。思维也要随之转变。我不只是代码的搬运工、软件的敲字员，而是一个解决问题的工程师。写代码，是解决问题的手段，绝不是唯一答案。</p><p>在我看来，范式的意义，是帮助我们整理思绪，好让将来的“自己”或“他人”在回头阅读这些代码时，能更快地进入状态。这本来是程序员的一项自救之术，如今，却被大模型轻松超越。它记忆力更强，分析力更快，哪怕你写得一团糟，它也能看出门道。</p><p>那么，未来还需要范式吗？</p><p>也许真正的问题是：我们愿意把思维交给它，还是愿意保留一点属于人类自己的逻辑痕迹？</p><p>范式，是程序世界中的路标。</p><p>而当道路不再由我们铺设，是否意味着，我们也将不再是旅人，而是被路指引的方向？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;所谓“范式”，是一种形式，更是一种思维模式。&lt;/p&gt;
&lt;p&gt;程序员，作为文字工作者的一个分支，要与成千上万行代码打交道，自然离不开各种范式的指引。就像预设好了一个“系统提示”，你无需一遍遍向同事解释“什么是面向对象”，也无需在设计模式上争论太多细节。大家心照不宣，默认你在某</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Access Files on the Steam Deck via SSH using VS Code</title>
    <link href="http://yiweishen.github.io/2024/07/21/Access-Files-on-the-Steam-Deck-via-SSH-using-VS-Code/"/>
    <id>http://yiweishen.github.io/2024/07/21/Access-Files-on-the-Steam-Deck-via-SSH-using-VS-Code/</id>
    <published>2024-07-21T04:20:55.000Z</published>
    <updated>2025-04-12T01:58:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>Accessing the Steam Deck’s file system remotely can be incredibly useful.</p><div><!-- https://github.com/rough-stuff/rough-notation -->  <script src="https://unpkg.com/rough-notation/lib/rough-notation.iife.js"></script>  <div>    Imagine using <span id="raycastCircle"> Raycast</span> to quickly open a recent <span id="vsCodeBox">VS Code</span> project, and one of them is a folder on the <span id="steamHighlight">Steam Deck</span> via an <span id="sshUnderline">SSH connection</span>. With just one click, you're connected and ready to go.  </div><script>    const { annotate, annotationGroup } = RoughNotation;    // Span elements    const elements = [        { id: '#raycastCircle', type: 'circle', color: 'red', delay: 9000 },        { id: '#vsCodeBox', type: 'box', color: 'blue', delay: 10000 },        { id: '#steamHighlight', type: 'highlight', color: 'yellow', delay: 11000 },        { id: '#sshUnderline', type: 'underline', color: 'green', delay: 12000 }    ];    // Create and store annotations dynamically    const annotationsList = elements.map(({ id, type, color }) =>        annotate(document.querySelector(id), { type, color, animationDuration: 2000 })    );    // Show annotations    const annotations = annotationGroup(annotationsList);    annotations.show();    // Hide annotations with dynamic delays    elements.forEach(({ delay }, index) => {        setTimeout(() => annotationsList[index].hide(), delay);    });</script></div><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>Before getting started, make sure you have the following:</p><ul><li>Steam Deck: Ensure your Steam Deck is powered on and connected to the same Wi-Fi network as your laptop.</li><li>Computer: A Mac (or possibly a PC) with Visual Studio Code installed.</li><li>SSH Enabled on Steam Deck: SSH is not enabled by default. You will need to enable it through the Steam Deck’s desktop mode.</li><li>VS Code Extensions: Install the “Remote - SSH” extension on your VS Code.</li></ul><h2 id="Step-1-Enable-SSH-on-the-Steam-Deck"><a href="#Step-1-Enable-SSH-on-the-Steam-Deck" class="headerlink" title="Step 1: Enable SSH on the Steam Deck"></a>Step 1: Enable SSH on the Steam Deck</h2><p>Press the Steam button, navigate to Power, and switch to Desktop mode. Once in desktop mode, open the KDE application launcher and search for Konsole (terminal).</p><ul><li>Start the SSH server with:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start sshd</span><br></pre></td></tr></table></figure></li><li>Additionally, enable SSH to start on boot:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> sshd</span><br></pre></td></tr></table></figure></li><li>Verify Your IP Address, in the terminal, type:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure>Note the IP address (e.g., 192.168.1.xxx or 10.0.0.xxx) that corresponds to your Wi-Fi connection.</li></ul><h2 id="Step-2-Create-SSH-Key-Pairs-Recommended-and-not-optional-if-you-want-to-have-a-smooth-flow-with-Raycast"><a href="#Step-2-Create-SSH-Key-Pairs-Recommended-and-not-optional-if-you-want-to-have-a-smooth-flow-with-Raycast" class="headerlink" title="Step 2: Create SSH Key Pairs (Recommended and not optional if you want to have a smooth flow with Raycast)"></a>Step 2: Create SSH Key Pairs (Recommended and not optional if you want to have a smooth flow with Raycast)</h2><p>Creating SSH key pairs can enhance the security of your SSH connection by using public-key cryptography instead of a password.</p><ul><li>Generate SSH Key Pair on the Steam Deck:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -f ~/.ssh/sd_rsa</span><br></pre></td></tr></table></figure>This command will save the key pair in the specified folder (~&#x2F;.ssh&#x2F;sd_rsa).</li></ul><p>This process will create two files:</p><ul><li>“sd_rsa”: This is your private key. Keep this file secure and find a way to copy it to the Mac. Be creative; for example, you can use GoodReader to set up a quick WiFi Server.</li><li>“sd_rsa.pub”: This is your public key. This file can be shared and will stay on the Steam Deck.</li></ul><p>For added security, you can:</p><ul><li>Disable password authentication on the Steam Deck:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure></li><li>Find the line that says “#PasswordAuthentication” and change it to:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PasswordAuthentication no</span><br><span class="line">PubkeyAuthentication <span class="built_in">yes</span></span><br></pre></td></tr></table></figure></li><li>Save the file (:wq) and restart the SSH service:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart sshd</span><br></pre></td></tr></table></figure></li><li>Ensure your public key is added to the “authorized_keys” file:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/sd_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></li></ul><h2 id="Step-3-Configure-SSH-Access-in-VS-Code"><a href="#Step-3-Configure-SSH-Access-in-VS-Code" class="headerlink" title="Step 3: Configure SSH Access in VS Code"></a>Step 3: Configure SSH Access in VS Code</h2><p>Ensure you have the Remote - SSH extension installed. If not, you can find it in the VS Code Marketplace. Copy the “sd_rsa” private key to your Mac and set the correct permissions (chmod 600 if necessary).</p><p><img src="/img/remote-ssh-vscode.png"></p><ul><li>Press “Cmd+Shift+P” on Mac to open the command palette.</li><li>Type “Remote-SSH: Open SSH Configuration File…” and select it.</li><li>Choose the SSH configuration file you want to edit (usually “~&#x2F;.ssh&#x2F;config”).</li><li>Add a new entry to the configuration file in the following format:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host steamdeck</span><br><span class="line">    HostName 192.168.1.xxx</span><br><span class="line">    User deck</span><br><span class="line">    IdentityFile ~/.ssh/sd_rsa</span><br></pre></td></tr></table></figure></li><li>Replace “192.168.1.xxx” with the actual IP address of your Steam Deck.</li><li>Save and close the configuration file.</li></ul><h2 id="Step-4-Connect-to-SSH-in-VS-Code"><a href="#Step-4-Connect-to-SSH-in-VS-Code" class="headerlink" title="Step 4: Connect to SSH in VS Code"></a>Step 4: Connect to SSH in VS Code</h2><ul><li>Again, open the command palette (“Cmd+Shift+P”).</li><li>Type “Remote-SSH: Connect to Host…” and select the entry you just added.</li><li>The first time only, you may be prompted to accept the host’s fingerprint.</li><li>You’ll need to grant VS Code permission to access the local network. Go to System Settings &gt; Privacy &amp; Security &gt; Local Network and ensure VS Code is listed and has access enabled.</li></ul><p>By following the above steps, you can conveniently access and manage your Steam Deck’s file system using the powerful toolset provided by VS Code over an SSH connection.</p><h2 id="Step-5-Shortcut-Using-Raycast-and-VS-Code-Extension"><a href="#Step-5-Shortcut-Using-Raycast-and-VS-Code-Extension" class="headerlink" title="Step 5: Shortcut Using Raycast and VS Code Extension"></a>Step 5: Shortcut Using Raycast and VS Code Extension</h2><p>If you haven’t already, download and install Raycast from <a href="https://www.raycast.com/">Raycast’s official website</a>. Open Raycast and go to the “Extensions Store” and search for “Visual Studio Code” and install the extension.</p><p><img src="/img/raycast-recent-vscode-projects.png"></p><ul><li>Open Raycast “Option+Space”</li><li>Type “VS Code” and you will see the shortcut in VS Code Recent Projects.</li><li>Select “deck” or another name for your SSH connection from the list to quickly open it in the VS Code.</li></ul><p>A big thanks to the developers who created these amazing tools!</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>SSH-KEYGEN General Commands Manual<br><a href="https://man.openbsd.org/ssh-keygen">https://man.openbsd.org/ssh-keygen</a></p><p>Remote SSH with Visual Studio Code<br><a href="https://code.visualstudio.com/blogs/2019/07/25/remote-ssh">https://code.visualstudio.com/blogs/2019/07/25/remote-ssh</a></p><p>Remote SSH: Tips and Tricks<br><a href="https://code.visualstudio.com/blogs/2019/10/03/remote-ssh-tips-and-tricks">https://code.visualstudio.com/blogs/2019/10/03/remote-ssh-tips-and-tricks</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Accessing the Steam Deck’s file system remotely can be incredibly useful.&lt;/p&gt;
&lt;div&gt;
&lt;!-- https://github.com/rough-stuff/rough-notation --</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HTTP Headers for Resumable Downloads</title>
    <link href="http://yiweishen.github.io/2024/04/23/HTTP-Headers-for-Resumable-Downloads/"/>
    <id>http://yiweishen.github.io/2024/04/23/HTTP-Headers-for-Resumable-Downloads/</id>
    <published>2024-04-23T03:14:18.000Z</published>
    <updated>2024-04-23T03:52:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>We’ve all experienced the frustration of a poor internet connection. You may recall the disappointment of a large file download failing after 24 hours of waiting. Even worse, discovering that the download is not resumable.</p><p>Responsibility for resumable downloads doesn’t solely rest on the client side with the correct setting of HTTP headers. It’s equally, if not more, important for the backend to correctly enable several headers and implement the associated logic.</p><p>While I won’t delve into the detailed implementation in a specific language, understanding the headers discussed below will equip you with the knowledge to easily implement this feature if you wish.</p><h1 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h1><p>The only aspect you need to focus on is the Range HTTP request header. This header specifies the portions of a resource that the server should return. That’s all there is to it.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Range: &lt;unit&gt;=&lt;range-start&gt;-</span><br></pre></td></tr></table></figure><p>On the client side, the only requirement is to properly implement the Range HTTP request header. This involves using the correct unit and determining the starting point of the range. The server then knows which portion of the file to send. There’s no need to worry about specifying the range end, as the typical use case involves resuming and downloading the entire file.</p><h1 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h1><p>Now, things start to get more complicated.</p><p>The ETag (also known as entity tag) HTTP response header serves as an identifier for a specific version of a resource.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ETag: <span class="string">&quot;&lt;etag_value&gt;&quot;</span></span><br></pre></td></tr></table></figure><p>If your target client includes a browser, then you need to set the ETag. Modern browsers expect to see this value; otherwise, the browser will simply retry downloading the entire file again.</p><p>The Content-Range response HTTP header signifies the position of a partial message within the full body message.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Range: &lt;unit&gt; &lt;range-start&gt;-&lt;range-end&gt;/&lt;size&gt;</span><br></pre></td></tr></table></figure><p>Imagine you are downloading a file of 500 bytes, but due to an unstable internet connection, the download is interrupted after only 100 bytes. In this scenario, you would expect the server to send the remaining 400 bytes of the file. Consequently, you would anticipate seeing the appropriate header in the server’s response.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Range: bytes 100-499/500</span><br></pre></td></tr></table></figure><p>Check out MDN for understanding those numbers, I won’t explain them here.</p><p>The Accept-Ranges HTTP response header acts as a signal from the server, indicating its capability to handle partial requests from the client for file downloads.</p><p>Essentially, this header communicates to the client, “Hey, I am capable of handling this, let’s proceed.”</p><p>Don’t ask me why, you just need it.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Accept-Ranges: &lt;range-unit&gt;</span><br></pre></td></tr></table></figure><p>I suggest simply using bytes.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure><p>The Content-Length header signifies the size of the message body, measured in bytes, that is transmitted to the recipient.</p><p>In layman’s terms, it represents the bytes of the remaining file.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Length: &lt;length&gt;</span><br></pre></td></tr></table></figure><p>Let’s continue the same example mentioned above, the server is going to send the remaining 400 bytes of the file.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Length: 400</span><br></pre></td></tr></table></figure><p>This is merely an introduction.</p><p>There are many complex considerations to take into account. For instance, when dealing with ETags, you must strategize on how to assign a unique ID to each resource. Additionally, you need to determine how to update the ETag when a resource is upgraded to a newer version.</p><p>Understanding those HTTPS headers is a good start.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;We’ve all experienced the frustration of a poor internet connection. You may recall the disappointment of a large file download failing a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Handle Login with Python Bindings for Selenium</title>
    <link href="http://yiweishen.github.io/2024/03/24/Handle-Login-with-Python-Bindings-for-Selenium/"/>
    <id>http://yiweishen.github.io/2024/03/24/Handle-Login-with-Python-Bindings-for-Selenium/</id>
    <published>2024-03-24T02:52:12.000Z</published>
    <updated>2024-03-24T03:30:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>Before everything else, you need to install the Selenium package, of course.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure><p>Or, if you hate to deal with anti-bot measures, you can just use this.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install undetected-chromedriver</span><br></pre></td></tr></table></figure><p>Then, add the user data directory to the ChromeOptions object. It is the path to your Chrome profile. For macOS, it is located at ‘~&#x2F;Library&#x2F;Application Support&#x2F;Google&#x2F;Chrome’.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> undetected_chromedriver <span class="keyword">as</span> uc</span><br><span class="line"></span><br><span class="line">options = uc.ChromeOptions()</span><br><span class="line">options.add_argument(<span class="string">f&quot;--user-data-dir=<span class="subst">&#123;<span class="string">&#x27;Path_to_your_Chrome_profile&#x27;</span>&#125;</span>&quot;</span>)</span><br><span class="line">driver = uc.Chrome(options=options)</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">&#x27;https://www.example.com&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The <code>--user-data-dir</code> argument is kind of cheating because it allows you to bypass the login process without actually logging in.</p><p>Cookie is your friend.</p><p>But sometimes, you need to handle the login process, for instance, you have to switch between multiple accounts.</p><p>First of all, take care of your credentials. Use an .env file.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"></span><br><span class="line">load_dotenv()</span><br><span class="line"></span><br><span class="line">USERNAME = os.getenv(<span class="string">&#x27;USERNAME_ENV_VAR&#x27;</span>)</span><br><span class="line">PASSWORD = os.getenv(<span class="string">&#x27;PASSWORD_ENV_VAR&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Then, you can use the <code>send_keys</code> method to fill in the username and password fields. I add one while loop to wait for the element in case the script runs too fast.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        driver.find_element(by=By.ID, value=<span class="string">&quot;username&quot;</span>).send_keys(USERNAME)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">driver.find_element(by=By.ID, value=<span class="string">&quot;password&quot;</span>).send_keys(PASSWORD)</span><br><span class="line">driver.find_element(by=By.ID, value=<span class="string">&quot;submit&quot;</span>).click()</span><br></pre></td></tr></table></figure><p>After logging in, the chrome usally pops up a dialog asking if you want to save the password. It is annoying.</p><p>You can try to disable it by adding the <code>--disable-save-password-bubble</code> or <code>--disable-popup-blocking</code> argument to the ChromeOptions object. I don’t think it works. But you can try.</p><p>In the end, I just used a hack, that is to open a new tab and immediately close it, the popup will appear.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># open a new tab</span></span><br><span class="line">driver.execute_script(<span class="string">&quot;window.open(&#x27;&#x27;,&#x27;_blank&#x27;)&quot;</span>)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">1</span>) <span class="comment"># 1 second wait is enough I guess</span></span><br><span class="line">driver.switch_to.window(driver.window_handles[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># say goodbye to the new tab</span></span><br><span class="line">driver.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># now switch back to the original tab</span></span><br><span class="line">driver.switch_to.window(driver.window_handles[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>That’s it.</p><p>Oh, one more thing.</p><p>Add user-agent to the ChromeOptions object is also a good idea. And please do not forget to specify <code>version_main</code> for the driver to match your current chrome version.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Before everything else, you need to install the Selenium package, of course.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Raycast Alternative on Windows 11: Microsoft PowerToys</title>
    <link href="http://yiweishen.github.io/2024/03/16/Raycast-Alternative-on-Windows-11-Microsoft-PowerToys/"/>
    <id>http://yiweishen.github.io/2024/03/16/Raycast-Alternative-on-Windows-11-Microsoft-PowerToys/</id>
    <published>2024-03-16T15:42:57.000Z</published>
    <updated>2024-03-16T16:04:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>Raycast is a productivity tool for macOS. It allows you to quickly access files, folders, and applications. It’s great, but only available on macOS. If you already use Raycast, you know how useful it is. If you don’t, you should give it a try if you have a Mac.</p><p>For daily work, I also use Windows, and I was trying to implement a similar workflow on Windows. The thing I missed the most was the ability to search and open previously used workspaces in VS Code or remote machines with a few keystrokes.</p><p>You can guess my excitement when I found out about Microsoft PowerToys.</p><p>OK.</p><p>Enable VS Code search in the settings for PowerToys Run utility.</p><p>Then, you can use the shortcut <code>Alt + Space</code> to search for your workspaces.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; THE_WORKSPACE_NAME_YOU_WANT_TO_OPEN</span><br></pre></td></tr></table></figure><p>Now I have to find the equivalent of <code>zsh-autosuggestions</code> on Windows. Wish me luck.</p><p>Links to the tools mentioned in this post:</p><ul><li><a href="https://raycast.com/">Raycast</a></li><li><a href="https://github.com/microsoft/PowerToys">Microsoft PowerToys</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Raycast is a productivity tool for macOS. It allows you to quickly access files, folders, and applications. It’s great, but only availabl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Install Windows 11 with VMware Fusion on Apple M2 MacBook</title>
    <link href="http://yiweishen.github.io/2023/09/02/Install-Windows-11-with-VMware-Fusion-on-Apple-M2-MacBook/"/>
    <id>http://yiweishen.github.io/2023/09/02/Install-Windows-11-with-VMware-Fusion-on-Apple-M2-MacBook/</id>
    <published>2023-09-02T18:54:02.000Z</published>
    <updated>2023-09-02T19:27:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="The-Problem"><a href="#The-Problem" class="headerlink" title="The Problem"></a>The Problem</h2><ul><li>Microsoft is only providing intel version ISO file for Windows 11.</li><li>For Windows 11 Insider Preview, the arm version is provided only in VHDX format.</li></ul><h2 id="Workaround"><a href="#Workaround" class="headerlink" title="Workaround"></a>Workaround</h2><p>Luckily, we can get the ESD file and then convert it into ISO file which can be used in VMware.</p><h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><p>Go to the website of <a href="https://www.parallels.com/ca/products/desktop/">Parallels</a> to download their Mac app. Alternatively, you can get the DMG link from <a href="https://formulae.brew.sh/api/cask/parallels.json">Homebrew API</a></p><p>The link looks like <a href="https://download.parallels.com/desktop/v19/19.0.0-54570/ParallelsDesktop-19.0.0-54570.dmg">this</a>. After downloading, double click the DMG file but don’t install the Parallels. You just need to mount the DMG file.</p><p>Then open the terminal and run the following commands:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ditto /Volumes/Parallels\ Desktop\ 19/Parallels\ Desktop.app/Contents/MacOS/prl_esd2iso /usr/local/bin/prl_esd2iso</span><br><span class="line"><span class="built_in">sudo</span> ditto /Volumes/Parallels\ Desktop\ 19/Parallels\ Desktop.app/Contents/Frameworks/libwimlib.1.dylib /usr/local/lib/libwimlib.1.dylib</span><br></pre></td></tr></table></figure><p>We can thank Parallels for providing these amazing tools later. Unmount and delete the DMG file.</p><p>To figure out the download link for Windows 11 ESD file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Downloads/ &amp;&amp; curl -L <span class="string">&quot;https://go.microsoft.com/fwlink?linkid=2156292&quot;</span> -o products_Win11.cab &amp;&amp; tar -xf products_Win11.cab products.xml &amp;&amp; <span class="built_in">cat</span> products.xml | <span class="built_in">cat</span> products.xml | grep <span class="string">&quot;.*_CLIENTCONSUMER_RET_A64FRE_en-us.esd&quot;</span> | sed -e s/<span class="string">&quot;&lt;FileName&gt;&quot;</span>//g -e s/<span class="string">&quot;&lt;\/FileName&gt;&quot;</span>//g -e s/\ //g -e s/<span class="string">&quot;&lt;FilePath&gt;&quot;</span>//g -e s/<span class="string">&quot;&lt;\/FilePath&gt;&quot;</span>//g -e s/\ //g | <span class="built_in">head</span> -n 2</span><br></pre></td></tr></table></figure><p>By the way, I assume your current working directory is ~&#x2F;Downloads&#x2F;. If not, please change it accordingly.</p><p>Use curl to download the ESD file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://dl.delivery.mp.microsoft.com/filestreamingservice/files/f16733c5-e9f8-4613-9fe6-d331c8dd6e28/22621.1702.230505-1222.ni_release_svc_refresh_CLIENTCONSUMER_RET_A64FRE_en-us.esd --output win11.esd</span><br></pre></td></tr></table></figure><p>Convert the ESD file into ISO file.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prl_esd2iso ~/Downloads/win11.esd ~/Downloads/win11.iso</span><br></pre></td></tr></table></figure><p>Now you can insert the ISO file into VMware Fusion which is free to use with a <a href="https://www.vmware.com/go/get-fusionplayer-key">personal license</a> You can find the license key after you register&#x2F;login on the their website.</p><p>Install the vmware fusion with Homebrew. Yes, you need have Homebrew installed, but I guess you already done it.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install --cask vmware-fusion</span><br></pre></td></tr></table></figure><p>If you run into the chown issue like:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Chown /Applications/VMware Fusion.app: Operation not permitted</span><br></pre></td></tr></table></figure><p>Please double check if the Full Disk Access is granted for the Terminal.app in system settings Privacy &amp; Security.</p><p>Drag and drop the Windows 11 ISO file into vmware. You can go with UEFI and also the default values with the rest of the settings.</p><p>Pay attention to the message on the screen, if it is saying press any key to continue, don’t wait. You only have five seconds to hit the key, so be fast. I will not talk about the basic steps of installing Windows 11, I trust you can install the operating system with the GUI.</p><p>When you reach the setup step of internet connection, press shift + fn + F10 to invoke the CMD. Input:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OOBE\BYPASSNRO</span><br></pre></td></tr></table></figure><p>It will auto restart the setup steps and this time you choose the option I don’t have internet (Yup, actually you don’t.) Continue with limited setup. If everything goes well. In the end, you get into Windows 11 Desktop</p><p>Run PowerShell as Administrator and type:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure><p>Insert the VMware Tools CD image into the virtual machine. Run the setup script with PowerShell.</p><p>In case you want to set the Execution Policy back:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy Restricted</span><br></pre></td></tr></table></figure><p>If the VMware Tools are successfully installed, the internet connection is working inside the virtual machine. Adjust settings as you wish. For example, set the display resolution to 2880 x 1800 and Scale to 200%.</p><p>A fully operational Windows 11 on Mac is all yours.</p><p>Enjoy.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;The-Problem&quot;&gt;&lt;a href=&quot;#The-Problem&quot; class=&quot;headerlink&quot; title=&quot;The Problem&quot;&gt;&lt;/a&gt;The Problem&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Microsoft is only providing </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Find and Terminate Active Resources on AWS Using Tag Editor in Resource Groups</title>
    <link href="http://yiweishen.github.io/2023/08/23/Find-and-Terminate-Active-Resources-on-AWS-Using-Tag-Editor-in-Resource-Groups/"/>
    <id>http://yiweishen.github.io/2023/08/23/Find-and-Terminate-Active-Resources-on-AWS-Using-Tag-Editor-in-Resource-Groups/</id>
    <published>2023-08-23T00:30:32.000Z</published>
    <updated>2023-08-23T00:36:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>You must have the same headache as me when AWS sends you an email saying this month you get yet another bill for all the unknown active resources on AWS.</p><p>But wait, where are they? How can I find them?</p><p>I have been asking myself these questions time and time again. Now I finally find a simple way to deal with it.</p><ul><li>Open AWS Resource Groups: <a href="https://console.aws.amazon.com/resource-groups/">https://console.aws.amazon.com/resource-groups/</a></li><li>In the navigation pane, on the left side of the screen, choose Tag Editor.</li><li>For Regions, choose All regions.</li><li>For Resource types, choose All supported resource types.</li><li>Choose Search resources.</li></ul><p>Then, you will see all the resources that are still active in your account.</p><p>You need to terminate them one by one.</p><p>Good luck!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;You must have the same headache as me when AWS sends you an email saying this month you get yet another bill for all the unknown active r</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Optimize TCP by enabling BBR on Oracle Cloud Linux</title>
    <link href="http://yiweishen.github.io/2023/05/07/Optimize-TCP-by-enabling-BBR-on-Oracle-Cloud-Linux/"/>
    <id>http://yiweishen.github.io/2023/05/07/Optimize-TCP-by-enabling-BBR-on-Oracle-Cloud-Linux/</id>
    <published>2023-05-07T20:03:12.000Z</published>
    <updated>2023-05-07T20:30:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>BBR (“Bottleneck Bandwidth and Round-trip propagation time”) aims to improve network performance and reduce latency. BBR estimates the available network bandwidth and the round-trip time (RTT) to adjust the TCP sending rate dynamically, reducing queuing delays and reducing packet loss.</p><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>Check if your Linux kernel version is 4.9 or higher.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span> -r</span><br></pre></td></tr></table></figure><h2 id="Congestion-Control-Status"><a href="#Congestion-Control-Status" class="headerlink" title="Congestion Control Status"></a>Congestion Control Status</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure><p>If you see <code>net.ipv4.tcp_available_congestion_control = bbr cubic reno</code>, then BBR is enabled. You can check it again after we enable BBR.</p><h2 id="Enable-BBR"><a href="#Enable-BBR" class="headerlink" title="Enable BBR"></a>Enable BBR</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.core.default_qdisc=fq&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.ipv4.tcp_congestion_control=bbr&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="built_in">sudo</span> sysctl -p</span><br></pre></td></tr></table></figure><p>The first line enables Fair Queueing (FQ), which is a network scheduler that improves network performance by reducing latency and jitter. The second line enables BBR.</p><p>The last line reloads the configuration file for the changes to take effect.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>Optimizing HTTP&#x2F;2 prioritization with BBR and tcp_notsent_lowat:<br><a href="https://blog.cloudflare.com/http-2-prioritization-with-nginx/">https://blog.cloudflare.com/http-2-prioritization-with-nginx/</a></p><p>TCP BBR congestion control comes to GCP – your Internet just got faster:<br><a href="https://cloud.google.com/blog/products/networking/tcp-bbr-congestion-control-comes-to-gcp-your-internet-just-got-faster">https://cloud.google.com/blog/products/networking/tcp-bbr-congestion-control-comes-to-gcp-your-internet-just-got-faster</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;BBR (“Bottleneck Bandwidth and</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Progress Display for ftplib using Rich Library in Python</title>
    <link href="http://yiweishen.github.io/2022/07/03/Progress-Display-for-ftplib-using-Rich-library-in-Python/"/>
    <id>http://yiweishen.github.io/2022/07/03/Progress-Display-for-ftplib-using-Rich-library-in-Python/</id>
    <published>2022-07-03T14:44:57.000Z</published>
    <updated>2022-07-03T16:19:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>The ftplib is included in Python batteries, which can be used to implement the client side of the FTP protocol. It’s compact and easy to use, but missing a user-friendly progress display. For example, if you have a long-time connection to upload &#x2F; download a large file to &#x2F; from the FTP server, the terminal tells you nothing about the progress of the file transfer.</p><p>Don’t panic.</p><p>Luckily, we have Rich, a Python library, showing rich text (with color and style) to the terminal. Especially, it can display continuously updated information regarding the progress of long running tasks &#x2F; file copies etc. That is perfect for the scenario of file transfer with FTP server.</p><p>The main challenge is that the Progress in rich.progress has to be called every time you need to update the UI and we have to, at the same time, synchronize the actual progress of FTP file transfer.</p><p>OK, show me the code.</p><p>First, make sure you have rich library installed. </p><p>Then, double check if you get these dependencies imported.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> ftplib <span class="keyword">import</span> FTP_TLS</span><br><span class="line"><span class="keyword">from</span> rich <span class="keyword">import</span> <span class="built_in">print</span></span><br><span class="line"><span class="keyword">from</span> rich.progress <span class="keyword">import</span> Progress, SpinnerColumn, TotalFileSizeColumn, TransferSpeedColumn, TimeElapsedColumn</span><br></pre></td></tr></table></figure><p>The implementation is straightforward with the help from the callback in FTP.retrbinary(). The callback function is called for each block of data received. And that is when we take the chance to update and render the progress display.</p><p>Here is an example of downloading from FTP server.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">download_from_ftp</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="comment"># ftplib.FTP_TLS() connects to FTP server with username and password</span></span><br><span class="line">    ftp = FTP_TLS(host=FTP_HOST, user=FTP_USER, passwd=FTP_PASSWD)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Securing the data connection requires the user to explicitly ask for it by calling the prot_p()</span></span><br><span class="line">    ftp.prot_p()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># prepare a file object on local machine to write data into</span></span><br><span class="line">    f = <span class="built_in">open</span>(file_path, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># initialize the ftp_progress with file_size, ftp connection and the file object</span></span><br><span class="line">    <span class="comment"># you may need to work out how to get the actual file size</span></span><br><span class="line">    <span class="comment"># Hint: FTP.dir() produces a directory listing as returned by the LIST command</span></span><br><span class="line">    tracker = ftp_progress(file_size, ftp, f)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># the trick to update rich progress display is using the callback function in retrbinary()</span></span><br><span class="line">    ftp.retrbinary(<span class="string">&#x27;RETR example_file.zip&#x27;</span>, callback=tracker.handle)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># stop progress display and also terminate the file object</span></span><br><span class="line">    tracker.stop()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># send a QUIT command to the server and close the connection</span></span><br><span class="line">    ftp.quit()</span><br></pre></td></tr></table></figure><p>If you go through the comments I wrote for the above function, then the below class should be fairly self-explanatory to you. The handle() is where we reflect the changes in each iteration, yes in callbacks.</p><p>One thing you should be aware of is that FTP uses two separate TCP connections: one to carry commands and the other to transfer data. So in the case of a long-time file transfer, you need to talk to the command channel once a while, to keep it connected. ‘NOOP’ command is designed for this, to prevent the client from being automatically disconnected (by server) for being idle.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ftp_progress</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, file_size, ftp, f</span>):</span><br><span class="line">        <span class="variable language_">self</span>.file_size = file_size</span><br><span class="line">        <span class="variable language_">self</span>.ftp = ftp</span><br><span class="line">        <span class="variable language_">self</span>.f = f</span><br><span class="line">        <span class="variable language_">self</span>.size_written = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.time = time.time()</span><br><span class="line">        <span class="variable language_">self</span>.progress = Progress(</span><br><span class="line">            SpinnerColumn(),</span><br><span class="line">            *Progress.get_default_columns(),</span><br><span class="line">            TotalFileSizeColumn(),</span><br><span class="line">            TransferSpeedColumn(),</span><br><span class="line">            TimeElapsedColumn(),</span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">self</span>.task_download = <span class="variable language_">self</span>.progress.add_task(<span class="string">&quot;[red]Download...&quot;</span>, total=<span class="variable language_">self</span>.file_size)</span><br><span class="line">        <span class="variable language_">self</span>.progress.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.progress.stop()</span><br><span class="line">        <span class="variable language_">self</span>.f.close()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="variable language_">self</span>.f.write(data)</span><br><span class="line">        <span class="variable language_">self</span>.size_written += <span class="number">8192</span></span><br><span class="line">        <span class="variable language_">self</span>.progress.update(<span class="variable language_">self</span>.task_download, advance=<span class="number">8192</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># keep FTP control connection alive</span></span><br><span class="line">        <span class="keyword">if</span> time.time() - <span class="variable language_">self</span>.time &gt; <span class="number">60</span>:</span><br><span class="line">            <span class="variable language_">self</span>.time = time.time()</span><br><span class="line">            <span class="variable language_">self</span>.ftp.putcmd(<span class="string">&#x27;NOOP&#x27;</span>)</span><br></pre></td></tr></table></figure><p>As a final note, it should be mentioned that be careful of passing by reference in Python. If you don’t close &#x2F; keep FTP connections correctly with the server, strange things (not the TV show) cound happen.</p><p>And, stay away from the nested callbacks, always.</p><p>Ref:</p><p>ftplib — FTP protocol client<br><a href="https://docs.python.org/3/library/ftplib.html">https://docs.python.org/3/library/ftplib.html</a></p><p>Rich’s documentation<br><a href="https://rich.readthedocs.io/en/stable/index.html">https://rich.readthedocs.io/en/stable/index.html</a></p><p>Progress Display (Rich)<br><a href="https://rich.readthedocs.io/en/stable/progress.html">https://rich.readthedocs.io/en/stable/progress.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;The ftplib is included in Python batteries, which can be used to implement the client side of the FTP protocol. It’s compact and easy to </summary>
      
    
    
    
    
    <category term="python" scheme="http://yiweishen.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Rebuild this blog using Hexo and Theme NexT</title>
    <link href="http://yiweishen.github.io/2022/02/24/Rebuild-this-blog-using-Hexo-and-Theme-NexT/"/>
    <id>http://yiweishen.github.io/2022/02/24/Rebuild-this-blog-using-Hexo-and-Theme-NexT/</id>
    <published>2022-02-24T23:08:10.000Z</published>
    <updated>2022-02-26T04:39:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Seven years ago, I wrote the first post in this blog to explain how to build this blog. Basically, I still use the Hexo framework for blogging. Here is the summary of how you can rebuild the blog today.</p><h1 id="Versions"><a href="#Versions" class="headerlink" title="Versions"></a>Versions</h1><ul><li>Node.js v17.6.0</li><li>npm 8.5.1</li><li>hexo 6.0.0</li><li>hexo-theme-next 8.10.0</li></ul><p>If you use the different versions, things may break.</p><h1 id="Create-GitHub-Repo-for-the-blog-folder"><a href="#Create-GitHub-Repo-for-the-blog-folder" class="headerlink" title="Create GitHub Repo for the blog folder"></a>Create GitHub Repo for the blog folder</h1><p>It will be convenient to use git to version control your post writings. You can just create an empty private repo. Let’s call the folder as your_blog_folder&#x2F;</p><h1 id="Create-Github-Repo-for-hosting-blog-Github-Page"><a href="#Create-Github-Repo-for-hosting-blog-Github-Page" class="headerlink" title="Create Github Repo for hosting blog Github Page"></a>Create Github Repo for hosting blog Github Page</h1><p>A public repo with the repo name as YOUR_NAME.github.io, YOUR_NAME here is your GitHub account name.</p><h1 id="Install-Node-Hexo-and-NexT"><a href="#Install-Node-Hexo-and-NexT" class="headerlink" title="Install Node, Hexo and NexT"></a>Install Node, Hexo and NexT</h1><p>Install Node.js with Homebrew</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>Install Hexo and NexT with npm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">npm install hexo-theme-next</span><br></pre></td></tr></table></figure><h1 id="Initialize-Hexo"><a href="#Initialize-Hexo" class="headerlink" title="Initialize Hexo"></a>Initialize Hexo</h1><p>Make sure you are in the target folder</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> your_blog_folder</span><br><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h1 id="Configure-Hexo-and-NexT"><a href="#Configure-Hexo-and-NexT" class="headerlink" title="Configure Hexo and NexT"></a>Configure Hexo and NexT</h1><p>your_blog_folder&#x2F;_config.yml is the config file for Hexo, and you need to copy the config file of NexT at &#x2F;node_modules&#x2F;hexo-theme-next&#x2F;_config.yml to the root folder of your_blog_folder&#x2F;, rename it to _config.next.yml. So they are now in the same folder. Here are some of the key configuration changes. </p><p>For _config.yml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line">timezone: <span class="string">&#x27;America/Toronto&#x27;</span></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line">url: http://YOUR_NAME.github.io</span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line">theme: next</span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/YOUR_NAME/YOUR_NAME.github.io</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>For _config.next.yml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Creative Commons 4.0 International License.</span></span><br><span class="line">creative_commons:</span><br><span class="line">  sidebar: <span class="literal">true</span></span><br><span class="line">  post: <span class="literal">true</span></span><br><span class="line"><span class="comment"># Menu Settings</span></span><br><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line"><span class="comment"># Sidebar Settings</span></span><br><span class="line">sidebar:</span><br><span class="line">  position: right</span><br><span class="line"><span class="comment"># Social Links</span></span><br><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/YOUR_NAME || fab fa-github</span><br><span class="line"><span class="comment"># Subscribe through Telegram Channel, Twitter, etc.</span></span><br><span class="line">follow_me:</span><br><span class="line">  RSS: /atom.xml || fa fa-rss</span><br><span class="line"><span class="comment"># Misc Theme Settings</span></span><br><span class="line">codeblock:</span><br><span class="line">  theme:</span><br><span class="line">    light: tomorrow-night-bright</span><br><span class="line">    dark: tomorrow-night-bright</span><br><span class="line">  copy_button:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">    style: mac</span><br><span class="line"><span class="comment"># Reading progress bar</span></span><br><span class="line">reading_progress:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="Write-a-post"><a href="#Write-a-post" class="headerlink" title="Write a post"></a>Write a post</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="string">&#x27;Your_post_name&#x27;</span></span><br></pre></td></tr></table></figure><p>And if you are using vscode, you will find the Your_post_name.md in the your_blog_folder&#x2F;source&#x2F;_posts&#x2F; you can write in markdown.</p><h1 id="Generate-the-post-html"><a href="#Generate-the-post-html" class="headerlink" title="Generate the post html"></a>Generate the post html</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>You can view the post locally and make changes if you need.</p><h1 id="Deploy-the-post-to-GitHub"><a href="#Deploy-the-post-to-GitHub" class="headerlink" title="Deploy the post to GitHub"></a>Deploy the post to GitHub</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>It will automatically generate GitHub Page for you which you can see by visiting YOUR_NAME.github.io</p><p>When you try to deploy the blog, if you see this message ERROR Deployer not found: git, or other error messages, for example, you need rss feed ready for your blog, please double check if you have all node_modules installed.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><h1 id="Reminder"><a href="#Reminder" class="headerlink" title="Reminder"></a>Reminder</h1><p>If you git clone the private blog repo to write a new post, remember to npm install before you try to deploy it to github. Because the moment you git clone to your local machine, the folder node_modules is empty. It is not sync with git by default as set in the .gitignore generated by Hexo.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf node_modules &amp;&amp; npm install --force</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><p>Ref:</p><p>Hexo<br><a href="https://hexo.io/">https://hexo.io</a></p><p>Theme NexT<br><a href="https://theme-next.js.org/">https://theme-next.js.org</a></p><p>hexo-generator-feed<br><a href="https://github.com/hexojs/hexo-generator-feed">https://github.com/hexojs/hexo-generator-feed</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Seven years ago, I wrote the first post in this blog to explain how to build this blog. Basically, I still use the Hexo framework for blo</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HTTP Proxy via Squid in Ubuntu on Microsoft Azure</title>
    <link href="http://yiweishen.github.io/2022/02/24/HTTP-Proxy-via-Squid-in-Ubuntu-on-Microsoft-Azure/"/>
    <id>http://yiweishen.github.io/2022/02/24/HTTP-Proxy-via-Squid-in-Ubuntu-on-Microsoft-Azure/</id>
    <published>2022-02-24T17:34:21.000Z</published>
    <updated>2022-02-26T04:39:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>For some reason, you need to use a HTTP Proxy.</p><p>Let me assume you have an account of Microsoft Azure. </p><h1 id="Create-VM-on-Azure"><a href="#Create-VM-on-Azure" class="headerlink" title="Create VM on Azure"></a>Create VM on Azure</h1><p>First, go to Azure Portal and create a linux virtual machine, say, Ubuntu 20.04 LTS. Default config will be fine during your VM setup.</p><h1 id="Connect-to-VM"><a href="#Connect-to-VM" class="headerlink" title="Connect to VM"></a>Connect to VM</h1><p>Connect to the virtual machine via SSH with client, in my case, I use Terminal on MacOS. Let’s rename the private key file to azureuser.pem which you download from the previous VM creation step. Use chmod 400 to ensure you have read-only access to the private key. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 400 azureuser.pem</span><br><span class="line">ssh -i /Path/To/Some/Folder/azureuser.pem azureuser@vps_IP</span><br></pre></td></tr></table></figure><h1 id="Install-Squid"><a href="#Install-Squid" class="headerlink" title="Install Squid"></a>Install Squid</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update -y</span><br><span class="line"><span class="built_in">sudo</span> apt-get upgrade -y</span><br><span class="line"><span class="built_in">sudo</span> apt-get install squid -y</span><br></pre></td></tr></table></figure><h1 id="Update-Squid-Config-file"><a href="#Update-Squid-Config-file" class="headerlink" title="Update Squid Config file"></a>Update Squid Config file</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/squid/squid.conf</span><br></pre></td></tr></table></figure><p>Find and insert the below two lines BEFORE the line of http_access deny all, to allow your IP to use the proxy.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">acl client src your_IP</span><br><span class="line">http_access allow client</span><br></pre></td></tr></table></figure><p>By default, Squid uses port 3128. If you are going to change it, just remember to double check if any other application is using the port by default.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http_port PORT_NUMBER</span><br></pre></td></tr></table></figure><p>By default, Squid will append your original IP address in the HTTP requests it forwards, something like X-Forwarded-For: 192.1.2.3. So, if you don’t want the destination server to know you are using a proxy, and you want to remove some of the request_headers that Squid passes on to the destination server, you can Ctrl + W to find and uncomment these:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># forwarded_for off</span></span><br><span class="line"><span class="comment"># request_header_access Authorization allow all</span></span><br><span class="line"><span class="comment"># request_header_access Proxy-Authorization allow all</span></span><br><span class="line"><span class="comment"># request_header_access Cache-Control allow all           </span></span><br><span class="line"><span class="comment"># request_header_access Content-Length allow all</span></span><br><span class="line"><span class="comment"># request_header_access Content-Type allow all</span></span><br><span class="line"><span class="comment"># request_header_access Date allow all</span></span><br><span class="line"><span class="comment"># request_header_access Host allow all</span></span><br><span class="line"><span class="comment"># request_header_access If-Modified-Since allow all</span></span><br><span class="line"><span class="comment"># request_header_access Pragma allow all</span></span><br><span class="line"><span class="comment"># request_header_access Accept allow all</span></span><br><span class="line"><span class="comment"># request_header_access Accept-Charset allow all</span></span><br><span class="line"><span class="comment"># request_header_access Accept-Encoding allow all</span></span><br><span class="line"><span class="comment"># request_header_access Accept-Language allow all</span></span><br><span class="line"><span class="comment"># request_header_access Connection allow all</span></span><br><span class="line"><span class="comment"># request_header_access All deny all</span></span><br></pre></td></tr></table></figure><p>All, done. Ctrl + O to save the file, and Ctrl + X to exit the file. Restart Squid or maybe you can just restart VM.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> service squid restart</span><br></pre></td></tr></table></figure><h1 id="Open-Port-for-Squid"><a href="#Open-Port-for-Squid" class="headerlink" title="Open Port for Squid"></a>Open Port for Squid</h1><p>Lastly, go to your VM on the azure portal, open the Networking Tab in the settings. You need to add one inbound port rules to make the Squid http_port number (by default, 3128) accessible from your IP.</p><h1 id="Use-HTTP-Proxy-in-Python"><a href="#Use-HTTP-Proxy-in-Python" class="headerlink" title="Use HTTP Proxy in Python"></a>Use HTTP Proxy in Python</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">http_proxy = &#123;</span><br><span class="line"><span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://vps_IP:PORT_NUMBER&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.get(url, proxies=http_proxy)</span><br></pre></td></tr></table></figure><h1 id="Use-HTTP-Proxy-in-Terminal-on-MacOS-Bash"><a href="#Use-HTTP-Proxy-in-Terminal-on-MacOS-Bash" class="headerlink" title="Use HTTP Proxy in Terminal on MacOS (Bash)"></a>Use HTTP Proxy in Terminal on MacOS (Bash)</h1><p>Enter the below command into the terminal for a session use.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=http://vps_IP:PORT_NUMBER</span><br></pre></td></tr></table></figure><p>If you want to make the proxy permanent in the Terminal, you can add it into bash_profile.</p><h1 id="Use-HTTP-Proxy-on-iOS"><a href="#Use-HTTP-Proxy-on-iOS" class="headerlink" title="Use HTTP Proxy on iOS"></a>Use HTTP Proxy on iOS</h1><p>Go to the settings page of the WiFi you are currently using. Configure HTTP Proxy to Manual and enter the details. </p><p>By the way, save your time and do not use Squid to bypass GFW. It will fail, technically speaking. I’m sorry. </p><p>Squid is not designed to encrypt internet traffic by any means. On the contrary, Squid server can and will intercept SSL interception because Squid is literally the man-in-the-middle (MiTM). Keep that in mind if you consider making use of the other’s HTTP Proxy.</p><p>Ref:</p><p>Ubuntu documentation for Squid:<br><a href="https://help.ubuntu.com/community/Squid">https://help.ubuntu.com/community/Squid</a></p><p>Squid man page:<br><a href="http://manpages.ubuntu.com/manpages/focal/en/man8/squid.8.html">http://manpages.ubuntu.com/manpages/focal/en/man8/squid.8.html</a></p><p>Official Squid site:<br><a href="http://www.squid-cache.org/">http://www.squid-cache.org</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;For some reason, you need to use a HTTP Proxy.&lt;/p&gt;
&lt;p&gt;Let me assume you have an account of Microsoft Azure. &lt;/p&gt;
&lt;h1 id=&quot;Create-VM-on-Azu</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Store Password in Database</title>
    <link href="http://yiweishen.github.io/2021/07/15/Store-Password-in-Database/"/>
    <id>http://yiweishen.github.io/2021/07/15/Store-Password-in-Database/</id>
    <published>2021-07-15T02:59:48.000Z</published>
    <updated>2022-02-24T22:06:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>I have been thinking about how to store customer’s login details into the database.</p><p>I mean, how to arrange the tables to store the passwords securely enough so that even if one day the database is leaked (and it will), no actual passwords are exposed.</p><p>On seond thoughts, managing the passwords by myself could be a bad idea.</p><p>Hand it over to Google or Facebook.</p><p>OK.</p><p>Let’s say, for some unknown reasons, I have to do it.</p><p>The million-dollar question is, HOW.</p><ul><li>If I store the plain text password anywhere in the database, the company probably would just fire the guy who designed the database, that’s me, for good.</li><li>If I store the hashed password with username, just like that, it is vulnerable to dictionary or rainbow table attacks. But maybe I can keep my job, for now.</li><li>If I use SHA512, instead of MD5, as the hash function, the computational power required to crack the passwords is signaficantly different.</li></ul><h2 id="Solution-perhaps"><a href="#Solution-perhaps" class="headerlink" title="Solution (perhaps)"></a>Solution (perhaps)</h2><p>Add random salt to each individual password, and then calculate the SHA512 hash values. Remember to generate salt again, once the customer changes the password. Also, I need a cryptographically secure random function to generate salt.</p><table><thead><tr><th align="center">LoginID</th><th align="center">LoginName</th><th align="center">Salt</th><th align="center">HashedPasswordWithSalt</th></tr></thead><tbody><tr><td align="center">0000001</td><td align="center">Alice</td><td align="center">T7#jd</td><td align="center">RncFuVDvUtVxXUFrvOHPfiF</td></tr><tr><td align="center">0000002</td><td align="center">Bob</td><td align="center">$1Yo2</td><td align="center">UZ0CkHkEccFErZujyAl3wys</td></tr><tr><td align="center">0000003</td><td align="center">Charlie</td><td align="center">UWp*1</td><td align="center">Pt4a1176FY2zcewmbcvEuAN</td></tr></tbody></table><p>In practice, use longer salt, I guess.</p><p>Ref:</p><p>Password Cracking<br><a href="https://www.youtube.com/watch?v=7U-RbOKanYs">https://www.youtube.com/watch?v=7U-RbOKanYs</a></p><p>How NOT to Store Passwords!<br><a href="https://www.youtube.com/watch?v=8ZtInClXe1Q">https://www.youtube.com/watch?v=8ZtInClXe1Q</a></p><p>Rainbow table<br><a href="https://en.wikipedia.org/wiki/Rainbow_table">https://en.wikipedia.org/wiki/Rainbow_table</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I have been thinking about how to store customer’s login details into the database.&lt;/p&gt;
&lt;p&gt;I mean, how to arrange the tables to store the</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Rescue a Bricked iPad after Jailbreaking</title>
    <link href="http://yiweishen.github.io/2021/07/11/Rescue-a-Bricked-iPad-after-Jailbreaking/"/>
    <id>http://yiweishen.github.io/2021/07/11/Rescue-a-Bricked-iPad-after-Jailbreaking/</id>
    <published>2021-07-11T17:01:16.000Z</published>
    <updated>2022-02-24T22:06:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Somehow I decided to reset an useless old iPad (A1395, iOS 9.3.5) which had been jailbroken. After erasing all the content and settings, I found the iPad became bricked. The situation is that if you press the Power button, a few seconds of Apple logo shows, followed by a battery status in the center of the screen. And that’s it, it just did not turn on.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>You need to make sure you have charged the iPad for several hours. It helps to rule out the cases when iPad refuses to turn on with low battery. If the battery is all good, there are two ways to rescue your iPad. Try the force-restart first.</p><h3 id="Force-Restart"><a href="#Force-Restart" class="headerlink" title="Force Restart"></a>Force Restart</h3><p>Hold down the Power button and the Home button at the same time for 10 seconds. You will see the Apple logo twice I guess. The second time when you see the logo, you can let go the two buttons and wait&#x2F;pray for the iPad to turn on.</p><h3 id="Factory-Reset-in-DFU-mode"><a href="#Factory-Reset-in-DFU-mode" class="headerlink" title="Factory Reset in DFU mode"></a>Factory Reset in DFU mode</h3><ul><li>Connect your iPad to a Mac (Sorry, I did not test if you can connect iPad to a Windows, chances are you can)</li><li>On the iPad, hold down the Power button and the Home button at the same time, yes, for 10 seconds.</li><li>Then, release the Power button but continue to hold the Home button for another 5 seconds.</li><li>It should be entering DFU mode now. Choose Restore the factory settings.</li><li>Wait for the iPad to reinstall everything once again.</li></ul><p>I know a bricked iPad is useless. But, you know what, after rescuing the old iPad, I find the iPad is <em>still</em> useless anyway.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Somehow I decided to reset an useless old iPad (A1395, iOS 9.3.5) which had been jailbroken. After erasing all the content and settings, </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Emulator 30.7.4 Crashes in Android Studio 4.2.1</title>
    <link href="http://yiweishen.github.io/2021/06/24/Emulator-30-7-4-Crashes-in-Android-Studio-4-2-1/"/>
    <id>http://yiweishen.github.io/2021/06/24/Emulator-30-7-4-Crashes-in-Android-Studio-4-2-1/</id>
    <published>2021-06-24T18:03:05.000Z</published>
    <updated>2022-02-24T22:06:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>All emulators in AVD failed to run after I <em>accidentally</em> update Android Studio to 4.2.1 on macOS Catalina (10.15.7).</p><p>You can find more debug details if you run the emulator in terminal.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">emulator -list-avds</span><br><span class="line">emulator -avd your_avd_name</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Downgrade (sort of) amulator to 30.4.5 (build_id 7140946)<br><a href="https://dl.google.com/android/repository/emulator-darwin_x64-7140946.zip">https://dl.google.com/android/repository/emulator-darwin_x64-7140946.zip</a></p><p>First, downlaod the zip file and unzip it.<br>Then, find the emulator folder under sdk folder. Replace the items inside with what you have downloaded.<br>Restart Android Studio (for example, go to menu File, select Invalidate Caches &#x2F; Restart) and try to run the emulators again.</p><p>You will see the warnings saying something, like, these files can not be verified due to unknown developer. Remember to go to Mac System Preference, Security &amp; Privacy, under the General tab, allow these apps to run. Eventually, everything will be fine. Good luck.</p><p>Ref:<br><a href="https://issuetracker.google.com/issues/191799887">https://issuetracker.google.com/issues/191799887</a><br><a href="https://issuetracker.google.com/issues/191805460">https://issuetracker.google.com/issues/191805460</a><br><a href="https://medium.com/nerd-for-tech/how-to-downgrade-android-emulator-on-macos-6e611d2d2bcb">https://medium.com/nerd-for-tech/how-to-downgrade-android-emulator-on-macos-6e611d2d2bcb</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;All emulators in AVD failed to run after I &lt;em&gt;accidentally&lt;/em&gt; update Android Studio to 4.2.1 on macOS Catalina (10.15.7).&lt;/p&gt;
&lt;p&gt;You c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL Workbench Hangs attempting to Open MySQL Editor</title>
    <link href="http://yiweishen.github.io/2021/06/13/MySQL-Workbench-Hangs-attempting-to-Open-MySQL-Editor/"/>
    <id>http://yiweishen.github.io/2021/06/13/MySQL-Workbench-Hangs-attempting-to-Open-MySQL-Editor/</id>
    <published>2021-06-13T02:20:54.000Z</published>
    <updated>2022-02-24T22:06:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>When this bug happens, it shows that it takes time to open the MySQL Editor, but the fact is that it will never open. So you will wait forever.</p><p>I am on MacOS Catalina and the MySQL Workbench version is 8.0.22, just in case you want to know.</p><h2 id="Why-this-error-happens-My-guess"><a href="#Why-this-error-happens-My-guess" class="headerlink" title="Why this error happens (My guess):"></a>Why this error happens (My guess):</h2><p>You changed the password to the MySQL database user, but it somehow failed to sync the password in the keychain.</p><h2 id="The-solution"><a href="#The-solution" class="headerlink" title="The solution:"></a>The solution:</h2><p>Go to the &#x2F;Applicaiton&#x2F;Utilities&#x2F; to find the Keychain Access App and run it. Search and delete the password to the database user. Try search ‘MySQL’. Reopen the MySQL Workbench and you should be fine now.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;When this bug happens, it shows that it takes time to open the MySQL Editor, but the fact is that it will never open. So you will wait fo</summary>
      
    
    
    
    
  </entry>
  
</feed>
